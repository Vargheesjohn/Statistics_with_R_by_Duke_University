Load packages
```{r load-packages, message=FALSE}
library(statsr)
library(dplyr)
library(ggplot2)
```

Data
```{r load-data}
data(nycflights)
```
```{r names}
names(nycflights)
```

```{r str}
str(nycflights)
```
#str stands for strUCTURE

__________________________________________________________________________________________
### Seven verbs                                                                          |
The `dplyr` package offers seven verbs (functions) for basic data manipulation:          |                                                                           |
                                                                                         |
- `filter()`                                                                             |
- `arrange()`                                                                            |
- `select()`                                                                             |
- `distinct()`                                                                           |
- `mutate()`                                                                             |
- `summarise()`                                                                          |
- `sample_n()`                                                                           |
                                                                                         |
We will use some of these functions in this lab, and learn about others in a future lab. |
_________________________________________________________________________________________|

We can examine the distribution of departure delays of all flights with a histogram.
```{r hist-dep-delay}
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram()
```

Histograms are generally a very good way to see the shape of a single distribution, but that shape can change depending on how the data 
is split between the different bins. You can easily define the binwidth you want to use:
```{r hist-dep-delay-bins}
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram(binwidth = 150)
```
#binwidth refers to the width of the bin

If we want to focus on departure delays of flights headed to RDU only, we need to first filter the data for flights headed to RDU 
(dest == "RDU") and then make a histogram of only departure delays of only those flights.
```{r rdu-flights-hist}
rdu_flights <- nycflights %>%
  filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
  geom_histogram()
```
___________________________________________________________________________________________________________________________________
Logical operators: Filtering for certain observations (e.g. flights from a particular airport) is often of interest in data frames |
where we might want to examine observations with certain characteristics separately from the rest of the data. To do so we use the |
filter function and a series of logical operators. The most commonly used logical operators for data analysis are as follows:      |
== means “equal to”                                                                                                                |
!= means “not equal to”                                                                                                            |
> or < means “greater than” or “less than”                                                                                         |
>= or <= means “greater than or equal to” or “less than or equal to”                                                               |
___________________________________________________________________________________________________________________________________|

We can also obtain numerical summaries for these flights:

```{r rdu-flights-summ}
rdu_flights %>%
  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
```
___________________________________________________________________________________________________________________________________
Summary statistics: Some useful function calls for summary statistics for a single numerical variable are as follows:              |
mean  |  median  |  sd  |  var  |  IQR  |  range  |  min  |  max                                                                   |
___________________________________________________________________________________________________________________________________|

We can also filter based on multiple criteria. Suppose we are interested in
flights headed to San Francisco (SFO) in February:

```{r}
sfo_feb_flights <- nycflights %>%
  filter(dest == "SFO", month == 2)
```
Note that we can separate the conditions using [ , ] if we want flights that are both headed to SFO and in February. 
If we are interested in either flights headed to SFO or in February we can use the [ | ] instead of the [ , ].

```{r sfo-feb-flights}
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>%
  filter(dest == "SFO", month == 2)
```

```{r sfo-feb-flights-arrival-delays}
# type your code for Question 2 here, and Knit
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
  geom_histogram()

sfo_feb_flights %>%
  summarise(mean_ad = mean(arr_delay), sd_ad = sd(arr_delay), median_ad = median(arr_delay), var_ad = var(arr_delay), IQR_ad = IQR(arr_delay), min_ad = min(arr_delay),  max_ad = max(arr_delay), n = n())
```

Another useful functionality is being able to quickly calculate summary 
statistics for various groups in your data frame. For example, we can modify the 
above command using the `group_by` function to get the same summary stats for 
each origin airport:
```{r summary-custom-list-origin}
rdu_flights %>%
  group_by(origin) %>%
  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
```
Here, we first grouped the data by `origin`, and then calculated the summary 
statistics.

```{r sfo-feb-flights-arrival-delays-carrier}
# type your code for Question 3 here, and Knit
sfo_feb_flights %>%
  group_by(carrier) %>%
  summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = n())
```

```{r mean-dep-delay-months}
nycflights %>%
  group_by(month) %>%
  summarise(mean_dd = mean(dep_delay)) %>%
  arrange(desc(mean_dd))
```

```{r highest-median-dep-delay-month}
# type your code for Question 5 here, and Knit
nycflights %>%
  group_by(month) %>%
  summarise(median_dd = median(dep_delay)) %>%
  arrange(desc(median_dd))
```

We can also visualize the distributions of departure delays across months using 
side-by-side box plots:

```{r delay-month-box}
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
  geom_boxplot()
```
There is some new syntax here: We want departure delays on the y-axis and the months on the x-axis to produce side-by-side box plots. 
Side-by-side box plots require a categorical variable on the x-axis, however in the data frame month is stored as a numerical variable (numbers 1 - 12). 
Therefore we can force R to treat this variable as categorical, what R calls a factor, variable with factor(month).



___________________________________________________________________________________________________________________

1.Question 1
Create a new data frame that includes flights headed to SFO in February, and save this data frame assfo_feb_flights. 
How many flights meet these criteria?
    68

2.Question 2
Make a histogram and calculate appropriate summary statistics for arrival delays of sfo_feb_flights. 
Which of the following is false?
    The distribution is right skewed.

3.Question 3
Calculate the median and interquartile range for arr_delays of flights in the sfo_feb_flights data frame, grouped by carrier. 
Which carrier has the highest IQR of arrival delays?
    Delta and United Airlines

4.Question 4
Considering the data from all the NYC airports, which month has the highest average departure delay?
    january

5.Question 5
Which month has the highest median departure delay from an NYC airport?
    December

6.Question 6
Is the mean or the median a more reliable measure for deciding which month(s) to avoid flying 
if you really dislike delayed flights, and why?
    Median would be more reliable as the distribution of delays is skewed.


