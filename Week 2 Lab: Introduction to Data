Load packages
```{r load-packages, message=FALSE}
library(statsr)
library(dplyr)
library(ggplot2)
```

Data
```{r load-data}
data(nycflights)
```
```{r names}
names(nycflights)
```

```{r str}
str(nycflights)
```
#str stands for strUCTURE

__________________________________________________________________________________________
### Seven verbs                                                                          |
The `dplyr` package offers seven verbs (functions) for basic data manipulation:          |                                                                           |
                                                                                         |
- `filter()`                                                                             |
- `arrange()`                                                                            |
- `select()`                                                                             |
- `distinct()`                                                                           |
- `mutate()`                                                                             |
- `summarise()`                                                                          |
- `sample_n()`                                                                           |
                                                                                         |
We will use some of these functions in this lab, and learn about others in a future lab. |
_________________________________________________________________________________________|

We can examine the distribution of departure delays of all flights with a histogram.
```{r hist-dep-delay}
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram()
```

Histograms are generally a very good way to see the shape of a single distribution, but that shape can change depending on how the data 
is split between the different bins. You can easily define the binwidth you want to use:
```{r hist-dep-delay-bins}
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
  geom_histogram(binwidth = 150)
```
#binwidth refers to the width of the bin

If we want to focus on departure delays of flights headed to RDU only, we need to first filter the data for flights headed to RDU 
(dest == "RDU") and then make a histogram of only departure delays of only those flights.
```{r rdu-flights-hist}
rdu_flights <- nycflights %>%
  filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
  geom_histogram()
```
___________________________________________________________________________________________________________________________________
Logical operators: Filtering for certain observations (e.g. flights from a particular airport) is often of interest in data frames |
where we might want to examine observations with certain characteristics separately from the rest of the data. To do so we use the |
filter function and a series of logical operators. The most commonly used logical operators for data analysis are as follows:      |
== means “equal to”                                                                                                                |
!= means “not equal to”                                                                                                            |
> or < means “greater than” or “less than”                                                                                         |
>= or <= means “greater than or equal to” or “less than or equal to”                                                               |
___________________________________________________________________________________________________________________________________|

We can also obtain numerical summaries for these flights:

```{r rdu-flights-summ}
rdu_flights %>%
  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
```
___________________________________________________________________________________________________________________________________
Summary statistics: Some useful function calls for summary statistics for a single numerical variable are as follows:              |
mean  |  median  |  sd  |  var  |  IQR  |  range  |  min  |  max                                                                   |
___________________________________________________________________________________________________________________________________|

We can also filter based on multiple criteria. Suppose we are interested in
flights headed to San Francisco (SFO) in February:

```{r}
sfo_feb_flights <- nycflights %>%
  filter(dest == "SFO", month == 2)
```
Note that we can separate the conditions using [ , ] if we want flights that are both headed to SFO and in February. 
If we are interested in either flights headed to SFO or in February we can use the [ | ] instead of the [ , ].

```{r sfo-feb-flights}
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>%
  filter(dest == "SFO", month == 2)
```

```{r sfo-feb-flights-arrival-delays}
# type your code for Question 2 here, and Knit
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
  geom_histogram()

sfo_feb_flights %>%
  summarise(mean_ad = mean(arr_delay), sd_ad = sd(arr_delay), median_ad = median(arr_delay), var_ad = var(arr_delay), IQR_ad = IQR(arr_delay), min_ad = min(arr_delay),  max_ad = max(arr_delay), n = n())
```

Another useful functionality is being able to quickly calculate summary 
statistics for various groups in your data frame. For example, we can modify the 
above command using the `group_by` function to get the same summary stats for 
each origin airport:
```{r summary-custom-list-origin}
rdu_flights %>%
  group_by(origin) %>%
  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
```
Here, we first grouped the data by `origin`, and then calculated the summary 
statistics.

```{r sfo-feb-flights-arrival-delays-carrier}
# type your code for Question 3 here, and Knit
sfo_feb_flights %>%
  group_by(carrier) %>%
  summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = n())
```

```{r mean-dep-delay-months}
nycflights %>%
  group_by(month) %>%
  summarise(mean_dd = mean(dep_delay)) %>%
  arrange(desc(mean_dd))
```

```{r highest-median-dep-delay-month}
# type your code for Question 5 here, and Knit
nycflights %>%
  group_by(month) %>%
  summarise(median_dd = median(dep_delay)) %>%
  arrange(desc(median_dd))
```

We can also visualize the distributions of departure delays across months using 
side-by-side box plots:

```{r delay-month-box}
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
  geom_boxplot()
```
There is some new syntax here: We want departure delays on the y-axis and the months on the x-axis to produce side-by-side box plots. 
Side-by-side box plots require a categorical variable on the x-axis, however in the data frame month is stored as a numerical variable (numbers 1 - 12). 
Therefore we can force R to treat this variable as categorical, what R calls a factor, variable with factor(month).

Suppose you will be flying out of NYC and want to know which of the three major NYC airports has the best on time departure rate of departing flights. 
Suppose also that for you a flight that is delayed for less than 5 minutes is basically "on time". You consider any flight delayed for 5 minutes of more to be "delayed".
In order to determine which airport has the best on time departure rate, we need to 
- first classify each flight as "on time" or "delayed",
- then group flights by origin airport,
- then calculate on time departure rates for each origin airport,
- and finally arrange the airports in descending order for on time departure percentage.

Let's start with classifying each flight as "on time" or "delayed" by creating a new variable with the `mutate` function.
```{r dep-type}
nycflights <- nycflights %>%
  mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
```
The first argument in the `mutate` function is the name of the new variable we want to create, in this case `dep_type`. 
Then if `dep_delay < 5` we classify the flight as `"on time"` and `"delayed"` if not, 
i.e. if the flight is delayed for 5 or more minutes.

Note that we are also overwriting the `nycflights` data frame with the new version of this data frame that includes the new `dep_type` variable.

We can handle all the remaining steps in one code chunk:
```{r}
nycflights %>%
  group_by(origin) %>%
  summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
  arrange(desc(ot_dep_rate))
```

We can also visualize the distribution of on on time departure rate across the three airports using a segmented bar plot.
```{r}
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
  geom_bar()
```


___________________________________________________________________________________________________________________

1.Question 1
Create a new data frame that includes flights headed to SFO in February, and save this data frame assfo_feb_flights. 
How many flights meet these criteria?
    68

2.Question 2
Make a histogram and calculate appropriate summary statistics for arrival delays of sfo_feb_flights. 
Which of the following is false?
    The distribution is right skewed.

3.Question 3
Calculate the median and interquartile range for arr_delays of flights in the sfo_feb_flights data frame, grouped by carrier. 
Which carrier has the highest IQR of arrival delays?
    Delta and United Airlines

4.Question 4
Considering the data from all the NYC airports, which month has the highest average departure delay?
    january

5.Question 5
Which month has the highest median departure delay from an NYC airport?
    December

6.Question 6
Is the mean or the median a more reliable measure for deciding which month(s) to avoid flying 
if you really dislike delayed flights, and why?
    Median would be more reliable as the distribution of delays is skewed.

7.Question 7
If you were selecting an airport simply based on on time departure percentage, which NYC airport would you choose to fly out of?
    LGA

8.Question 8
Mutate the data frame so that it includes a new variable that contains the average speed, avg_speed traveled by the plane for 
each journey (in mph). What is the tail number of the plane with the fastest avg_speed? Hint: Average speed can be calculated as 
distance divided by number of hours of travel, and note that air_time is given in minutes. If you just want to show the avg_speed 
and tailnum and none of the other variables, use the select function at the end of your pipe to select just these two variables with 
select(avg_speed, tailnum). You can google this tail number to find out more about the aircraft.
    N666DN

9.Question 9
Make a scatterplot of avg_speed vs. distance. Which of the following is true about the relationship between average speed and distance.
    There is an overall positive association between distance and average speed.

10.Question 10
Suppose you define a flight to be “on time” if it gets to the destination on time or earlier than expected, regardless of any departure 
delays. Mutate the data frame to create a new variable called arr_type with levels "on time" and "delayed" based on this definition. 
Also mutate to create a new variable called dep_type with levels "on time" and "delayed" depending on the flight was delayed for fewer 
than 5 minutes or 5 minutes or more, respectively. In other words, if arr_delay is 0 minutes or fewer, arr_type is "on time". 
If dep_delay is less than 5 minutes, dep_type is "on time". Then, determine the on time arrival percentage based on whether the flight 
departed on time or not. What fraction of flights that were "delayed" departing arrive "on time"? (Enter the answer in decimal point, 
like 0.xx)
    0.1833639
